{"version":3,"sources":["sbx.cloud-nglib.js"],"names":["angular","sbxLib","module","factory","sbxCommonSrv","$http","maps","urls","api","update_password","login","register","row","find","update","delete","uploadFile","addFolder","folderList","send_mail","payment_customer","payment_card","payment_token","password","toMap","array","mapName","key","i","length","getHeaders","headers","upper","val","toUpperCase","setHeaders","token","app_key","dev","request","options","method","url","params","data","then","response","errResponse","get","urlRequest","$sbxCommonSrv","post","query","send_query","put","loadPage","page","onSuccess","onError","console","count","row_model","log","res","success","Error","error","loadAllPages","size","where","value","async","waterfall","cb","items","fetched_results","concat","results","total_pages","err","fetched","pages","push","eachSeries","index","cbIter","Object","keys","forEach","type_name","hasOwnProperty","errIter","queryBuilder","QueryBuilder","form_data","common","checkPicture","elem","deferred","$q","defer","def","image","Image","onerror","resolve","onload","src","promise","onSuccessDefault","onErrorDefault"],"mappings":"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","file":"sbx.cloud-nglib.js","sourcesContent":["'use strict';\r\n(function (angular) {\r\n    var sbxLib = angular.module('sbx.cloud-nglib', []);\r\n\r\n    sbxLib.factory('sbxCommonSrv', ['$http', sbxCommonSrv]);\r\n\r\n    function sbxCommonSrv($http) {\r\n\r\n        let sbxCommonSrv = { maps: {} };\r\n\r\n        sbxCommonSrv.urls = {\r\n            api: 'https://sbxcloud.com/api',\r\n            update_password: '/user/v1/password',\r\n            login: '/user/v1/login',\r\n            register: '/user/v1/register',\r\n            row: '/data/v1/row',\r\n            find: '/data/v1/row/find',\r\n            update: '/data/v1/row/update',\r\n            delete: '/data/v1/row/delete',\r\n            uploadFile: '/content/v1/upload',\r\n            addFolder: '/content/v1/folder',\r\n            folderList: '/content/v1/folder',\r\n            send_mail: '/email/v1/send',\r\n            payment_customer: '/payment/v1/customer',\r\n            payment_card: '/payment/v1/card',\r\n            payment_token: '/payment/v1/token',\r\n            password: '/user/v1/password/request'\r\n        };\r\n\r\n        sbxCommonSrv.toMap = function (array, mapName, key) {\r\n\r\n            if (!sbxCommonSrv.maps[mapName]) {\r\n                sbxCommonSrv.maps[mapName] = {};\r\n            }\r\n\r\n            for (var i = 0; i < array.length; i++) {\r\n                sbxCommonSrv.maps[mapName][array[i][key]] = array[i];\r\n            }\r\n            return sbxCommonSrv.maps[mapName];\r\n        };\r\n\r\n        sbxCommonSrv.getHeaders = function () {\r\n            return sbxCommonSrv.headers\r\n        }\r\n\r\n        sbxCommonSrv.upper = function (val) {\r\n            return val == null ? '' : val.toUpperCase();\r\n        }\r\n\r\n        sbxCommonSrv.setHeaders = function (token) {\r\n            sbxCommonSrv.headers = {\r\n                'Authorization': 'Bearer ' + token,\r\n                'App-Key': sbxCommonSrv.app_key.dev\r\n            };\r\n        }\r\n\r\n        sbxCommonSrv.request = function (options) {\r\n            return $http({\r\n                method: options.method,\r\n                url: sbxCommonSrv.urls.api + options.url,\r\n                params: options.params || null,\r\n                data: options.data || null,\r\n                headers: sbxCommonSrv.getHeaders()\r\n            }).then(function (response) {\r\n                return response;\r\n            }, function (errResponse) {\r\n                return errResponse;\r\n            })\r\n        }\r\n\r\n        sbxCommonSrv.method = {\r\n            get: function (urlRequest, params) {\r\n                return $sbxCommonSrv.request({\r\n                    method: 'GET',\r\n                    url: urlRequest,\r\n                    params: params\r\n                });\r\n            },\r\n            post: function (urlRequest, params) {\r\n                return $http({\r\n                    method: 'POST',\r\n                    url: urlRequest,\r\n                    params: params\r\n                });\r\n            },\r\n            query: function (urlRequest, send_query) {\r\n                return $http({\r\n                    method: 'POST',\r\n                    url: urlRequest,\r\n                    data: send_query\r\n                });\r\n            },\r\n            put: function (urlRequest, params) {\r\n                return $http({\r\n                    method: 'PUT',\r\n                    url: urlRequest,\r\n                    data: params,\r\n                });\r\n            }\r\n        }\r\n\r\n        sbxCommonSrv.loadPage = function (query, page, onSuccess, onError) {\r\n            if (console.count) {\r\n                console.count('loadPage-->' + query.row_model);\r\n            } else {\r\n                console.log('loadPage-->' + query.row_model, page);\r\n            }\r\n            query.page = page;\r\n\r\n            sbxCommonSrv.method.query(sbxCommonSrv.urls.find, query).then(function (response) {\r\n\r\n                var res = response.data;\r\n\r\n                if (res.success) {\r\n                    onSuccess(res);\r\n                } else {\r\n                    onError(new Error(res.error));\r\n                }\r\n\r\n            });\r\n\r\n        };\r\n\r\n\r\n        /**\r\n         * Loads all the pages for a given entity\r\n         * Also wires de fetched entities using the wireFetch function\r\n         * @param query\r\n         * @param onSuccess (with a results objects that contains {results:[], fetched_results:{}}\r\n         * @param onError\r\n         */\r\n        sbxCommonSrv.loadAllPages = function (query, onSuccess, onError) {\r\n\r\n            // always load from the first page\r\n            query.page = 1;\r\n            query.size = 100;\r\n\r\n            if (!query.where) {\r\n                onError(new Error('Invalid value: ' + value));\r\n                return;\r\n            }\r\n\r\n            async.waterfall([\r\n                function (cb) {\r\n\r\n                    let items = [];\r\n\r\n                    let fetched_results = {};\r\n\r\n                    sbxCommonSrv.loadPage(query, 1, function (data) {\r\n\r\n                        // console.log(data.fetched_results);\r\n\r\n                        items = items.concat(data.results);\r\n\r\n                        if (data.fetched_results) {\r\n                            fetched_results = data.fetched_results;\r\n                        }\r\n\r\n                        cb(null, items, data.total_pages, fetched_results);\r\n                    }, function (err) {\r\n                        cb(err);\r\n                    });\r\n\r\n                }, function (items, total_pages, fetched, cb) {\r\n\r\n                    let fetched_results = fetched;\r\n\r\n                    // no more pages pending\r\n                    if (total_pages < 2) {\r\n                        cb(null, items, fetched_results);\r\n                        return;\r\n                    }\r\n\r\n                    // create an array with integers from 2..total_pages, like: [2,3,4...]\r\n                    //let pages = new Array(total_pages).fill().map((_, i) => i + 1).slice(1);\r\n\r\n                    let pages = [];\r\n\r\n                    for (let i = 2; i <= total_pages; i++) {\r\n                        pages.push(i);\r\n                    }\r\n\r\n\r\n                    async.eachSeries(pages, function (index, cbIter) {\r\n\r\n                        sbxCommonSrv.loadPage(query, index, function (data) {\r\n\r\n\r\n                            if (data.fetched_results) {\r\n\r\n                                Object.keys(data.fetched_results).forEach(function (type_name) {\r\n\r\n                                    if (!fetched_results.hasOwnProperty(type_name)) {\r\n                                        fetched_results[type_name] = {};\r\n                                    }\r\n\r\n                                    for (let key in data.fetched_results[type_name]) {\r\n                                        if (data.fetched_results[type_name].hasOwnProperty(key)) {\r\n                                            fetched_results[type_name][key] = data.fetched_results[type_name][key];\r\n                                        }\r\n                                    }\r\n\r\n                                });\r\n\r\n                            }\r\n\r\n                            items = items.concat(data.results);\r\n\r\n                            cbIter(null);\r\n                        }, function (err) {\r\n                            cbIter(err);\r\n                        });\r\n\r\n                    }, function (errIter) {\r\n                        cb(errIter, items, fetched_results);\r\n                    });\r\n\r\n\r\n                }], function (err, items, fetched_results) {\r\n\r\n                    if (err) {\r\n                        onError(err);\r\n                    } else {\r\n                        //console.log(JSON.stringify(items));\r\n                        onSuccess({ results: items, fetched_results: fetched_results });\r\n                    }\r\n\r\n                });\r\n\r\n\r\n        };\r\n\r\n        sbxCommonSrv.queryBuilder = QueryBuilder;\r\n\r\n        sbxCommonSrv.register = function (query, onSuccess, onError) {\r\n            sbxCommonSrv.method.get(sbxCommonSrv.urls.register, query)\r\n                .then(function (response) {\r\n                    var response = sbxCommonSrv.response.get.data;\r\n                    if (response.success) {\r\n                        onSuccess(response);\r\n                    } else {\r\n                        onError('Cannot register user');\r\n                    }\r\n                });\r\n        }\r\n\r\n        sbxCommonSrv.login = function (form_data, onSuccess, onError) {\r\n            $http.get(common.urls.api + common.urls.login, { params: form_data })\r\n                .then(function (response) {\r\n                    var res = response.data;\r\n                    if (res.success) {\r\n                        onSuccess(res)\r\n                    } else {\r\n\r\n                    }\r\n\r\n\r\n                });\r\n        }\r\n\r\n        sbxCommonSrv.checkPicture = function (url, elem) {\r\n            var deferred = $q.defer();\r\n            elem.def = deferred;\r\n\r\n            var image = new Image();\r\n            image.onerror = function () {\r\n                deferred.resolve(false);\r\n            };\r\n            image.onload = function () {\r\n                deferred.resolve(true);\r\n            };\r\n            image.src = url;\r\n            return deferred.promise;\r\n        }\r\n\r\n        sbxCommonSrv.onSuccessDefault = function (res) {\r\n            console.log(res);\r\n        }\r\n\r\n        sbxCommonSrv.onErrorDefault = function (err) {\r\n            if (console.error) {\r\n                console.error(err);\r\n            } else {\r\n                console.log(err);\r\n            }\r\n        }\r\n\r\n        return sbxCommonSrv;\r\n    }\r\n})(angular)"]}